#
#  Prolog for production reconstruction jobs
#
#include "Production/JobConfig/digitize/prolog.fcl"
#include "Offline/CommonMC/fcl/prolog.fcl"
#include "Offline/TrkHitReco/fcl/prolog.fcl"
#include "Offline/TrkReco/fcl/prolog.fcl"
#include "Offline/TrkPatRec/fcl/prolog.fcl"
#include "Offline/Mu2eKinKal/fcl/prolog.fcl"
#include "Offline/CaloReco/fcl/prolog.fcl"
#include "Offline/CaloCluster/fcl/prolog.fcl"
#include "Offline/CaloMC/fcl/prolog.fcl"
#include "Offline/CalPatRec/fcl/prolog.fcl"
#include "Offline/CRVResponse/fcl/prolog.fcl"
#include "Offline/CosmicReco/fcl/prolog.fcl"
#include "Offline/Filters/fcl/prolog.fcl"
#
BEGIN_PROLOG
Reconstruction : {
  producers : {
    @table::TrkHitReco.producers
    @table::TrkPatRec.producers
    @table::CalPatRec.producers
    @table::CaloReco.producers
    @table::CaloCluster.producers
    @table::CaloMC.producers
    @table::CrvResponsePackage.producers
    @table::CosmicReco.producers

    # instantiate explicit helix merger modules
    # NB: positive here refers to helicity, not charge!
    MHDe : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderDe" ]
    }
    MHDmu : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder" , "CalHelixFinderDmu" ]
    }
    # run helix merging on upstream, even though there is only one input collection,
    # as the merging also suppresses duplicates
    MHUe : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderUe" ]
    }
    MHUmu : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderUmu" ]
    }
    # KinKal fits

    KKDe : {
      @table::Mu2eKinKal.producers.KKDe
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDe.ModuleSettings
        @table::Mu2eKinKal.KKPrecursors
        HelixSeedCollections : [ "MHDe" ]
      }
    }
    KKUe : {
      @table::Mu2eKinKal.producers.KKUe
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDe.ModuleSettings
        @table::Mu2eKinKal.KKPrecursors
        HelixSeedCollections : [ "MHUe" ]
      }
    }
    KKDmu : {
      @table::Mu2eKinKal.producers.KKDmu
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDmu.ModuleSettings
        @table::Mu2eKinKal.KKPrecursors
        HelixSeedCollections : [ "MHDmu" ]
      }
    }
    KKUmu : {
      @table::Mu2eKinKal.producers.KKUmu
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDmu.ModuleSettings
        @table::Mu2eKinKal.KKPrecursors
        HelixSeedCollections : [ "MHUmu" ]
      }
    }
    KKLine : {
      @table::Mu2eKinKal.producers.KKLine
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKLine.ModuleSettings
        @table::Mu2eKinKal.KKPrecursors
        CosmicTrackSeedCollections : ["LineFinder"]
      }
    }
    KKOffSpill : {
      @table::Mu2eKinKal.producers.KKOffSpill
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKOffSpill.ModuleSettings
        @table::Mu2eKinKal.KKPrecursors
        CosmicTrackSeedCollections : ["LineFinder"]
      }
    }

    # Implicit TrkPatRec config for Final Fits and upstream fits (no merging)
    #
    # Prune output so that only parts related to reconstructed objects are kept
    #
    SelectRecoMC : {
      @table::CommonMC.SelectRecoMC
      CaloClusterMinE : 10.0
      SaveEnergySteps : false
      SaveUnusedDigiMCs : true
      SaveAllUnusedDigiMCs : false
      PrimaryParticle : "compressDigiMCs"
      StrawDigiCollection : "makeSD"
      ComboHitCollection : "makeSH"
      CaloDigiCollection : "CaloDigiMaker"
      CrvDigiCollection : "CrvDigi"
      CaloClusterCollection : "CaloClusterMaker"
      CrvCoincidenceClusterCollections : [ "CrvCoincidenceClusterFinder" ]
      StrawDigiMCCollection : "compressDigiMCs"
      CrvDigiMCCollection : "compressDigiMCs"
      KalSeedCollections  : [
            "KKDe", "KKDmu",
            "KKUe", "KKUmu",
            "KKLine","KKOffSpill"]
      HelixSeedCollections  : ["MHDe", "MHDmu",
            "MHUe", "MHUmu" ]
      VDSPCollection : "compressDigiMCs:virtualdetector"
    }
    # Compresion
    compressRecoMCs : {
      module_type : CompressDigiMCs
      strawDigiMCTag : "compressDigiMCs"
      crvDigiMCTag : "compressDigiMCs"
      simParticleTags : [ "compressDigiMCs" ]
      extraStepPointMCTags : ["compressDigiMCs:virtualdetector", "compressDigiMCs:stoppingtarget", "compressDigiMCs:protonabsorber" ]
      surfaceStepTags : [ "compressDigiMCs" ]
      caloShowerStepTags : [ ]
      caloShowerSimTag : ""
      caloShowerROTag : ""
      caloClusterMCTag : "CaloClusterTruthMatch"
      strawDigiMCIndexMapTag : "SelectRecoMC:StrawDigiMap"
      crvDigiMCIndexMapTag : "SelectRecoMC:CrvDigiMap"
      keepAllGenParticles : false
      crvCoincClusterMCTags : [ "CrvCoincidenceClusterMatchMC" ]
      primaryParticleTag : "compressDigiMCs"
      mcTrajectoryTag : "compressDigiMCs"
      rekeySimParticleCollection : false
      noCompression : false
      crvStepsToKeep : [ ]
    }
  }

  filters : {
    @table::CalPatRec.filters
    # reco filter
    RecoFilter : {
      module_type   : RecoMomFilter
      KalFinalTagRoot : ""
      TrkTags : [ "KKDe",
            "KKUe",
            "KKDmu",
            "KKUmu", "KKLine","KKOffSpill"
      ]
      # // set low cutoffs
      MomentumCutoff : [ 60.0,
        60.0,
        60.0,
        60.0, 60.0 , 60.0 ]
    }
  }

  analyzers : { # these are specific to MC
    recoCompressionCheck : @local::RecoCompression.Check
  }
  # reconstruct multiple types of tracks.  These are separate sequences to allow granular execution
  # Downstream electron sequence (plus and minus), using merged helices
  DeReco : [
    TZClusterFinder, AgnosticHelixFinder,   # AgnosticPatRec
    CalTimePeakFinderDe, CalHelixFinderDe,  # CalPatRec
    MHDe, # helix merging
    KKDe  # KinKal drift fits
  ]
  # Upstream electron sequence (plus and minus): TrkPatRec only
  UeReco : [
    TZClusterFinder, AgnosticHelixFinder,   # AgnosticPatRec
    CalTimePeakFinderUe, CalHelixFinderUe,  # CalPatRec
    MHUe, # helix merging
    KKUe  # KinKal drift fits
  ]
  # Downstream muon sequence (plus and minus)
  DmuReco : [
    TZClusterFinder, AgnosticHelixFinder,    # AgnosticPatRec
    CalTimePeakFinderDmu, CalHelixFinderDmu,  # CalPatRec
    MHDmu, # helix merging
    KKDmu  # KinKal drift fits
  ]
  # Upstream muon sequence (plus and minus)
  UmuReco : [
    TZClusterFinder, AgnosticHelixFinder,     # AgnosticPatRec
    CalTimePeakFinderUmu, CalHelixFinderUmu,  # CalPatRec
    MHUmu, # helix merging
    KKUmu  # KinKal drift fits
  ]
  # NoField straight line
  LineReco : [
    SimpleTimeCluster, LineFinder, KKLine
  ]
  # OffSpill
  OffSpillReco : [
    SimpleTimeCluster, LineFinder, KKOffSpill
  ]

  # add protons for calibration TODO!

  # Track reco sequence
  TrkReco : [  @sequence::TrkHitReco.PrepareHits ] # Track hit
  # Calo reco
  CaloReco : [ @sequence::CaloReco.Reco, @sequence::CaloCluster.Reco ]
  # CRV reco
  CrvReco : [ @sequence::CrvRecoPackage.CrvRecoSequence ]
  # full MC sequence; form the Calo and CRV matching, and compress based on reco content
  # temporary build surface steps from StepPointMCs; this is a patch
  MCReco :  [@sequence::CaloMC.TruthMatch,  CrvCoincidenceClusterMatchMC, SelectRecoMC, compressRecoMCs, CrvCoincidenceClusterMCAssns ]

  # define products to keep
  # First, high-level reco products, and associated sub-products
  HighRecoProducts : [
    "keep mu2e::KalSeeds_K*_*_*",
    "keep mu2e::CaloClusters_*_*_*",
    "keep mu2e::CaloHits_*_*_*", # these are needed as CaloClusters reference CaloHits and are not compressed
    "keep mu2e::IndexMap_SelectRecoMC_*_*", # the SelectRecoMC products need to be explicit as that has MC products as well
    "keep mu2e::RecoCount_SelectRecoMC_*_*", # that module needs to be refactored to fix this TODO
    "keep mu2e::StrawDigis_SelectRecoMC_*_*",
    "keep mu2e::StrawDigiADCWaveforms_SelectRecoMC_*_*",
    "keep mu2e::CaloDigis_SelectRecoMC_*_*",
    "keep mu2e::CrvDigis_SelectRecoMC_*_*",
    "keep mu2e::CrvCoincidenceClusters_SelectRecoMC_*_*",
    "keep mu2e::CrvRecoPulses_SelectRecoMC_*_*"
  ]
  # Middle reco products, pat rec intermediate results
  MidRecoProducts : [
    "keep mu2e::HelixSeeds_MH*_*_*",
    "keep mu2e::TimeClusters_MH*_*_*"
  ]
  # Low reco products, useful for debugging and event display
  LowRecoProducts : [
    "keep mu2e::ComboHits_*_*_*"
  ]
  # MC truth matched to reco
  HighRecoMCProducts : [
    "keep *_compressRecoMCs_*_*",
    "keep *_CrvCoincidenceClusterMCAssns_*_*",
    "keep *_SelectRecoMC_*_*"
  ]
  # Extra products for display
  EventDisplayProducts : [
    "keep mu2e::ComboHitCollection_DeltaFinder_*_*"
  ]
  GeneralProducts : [
    @sequence::Digitize.GeneralProducts,
    @sequence::Digitize.TriggerProducts # not sure we want to keep these
  ]
  # TODO: add products from reconstruction-level estimates of PBI from tracker and calorimeter

  GeneralMCProducts : [
    @sequence::Digitize.GeneralMCProducts
  ]

  EndSequence : [ recoCompressionCheck ]
}
Reconstruction.EndPath : [ @sequence::Reconstruction.EndSequence, Output  ]

# override CaloMC Truth matching provenance for compression

Reconstruction.producers.CaloHitTruthMatch.caloShowerSimCollection : "compressDigiMCs"
Reconstruction.producers.CaloHitTruthMatch.primaryParticle : "compressDigiMCs"

# all production tracks
Reconstruction.TrackReco : [
  @sequence::Reconstruction.DeReco,
  @sequence::Reconstruction.UeReco,
  @sequence::Reconstruction.DmuReco,
  @sequence::Reconstruction.UmuReco ]
#
# Full reconstruction Path
Reconstruction.RecoPath : [
  @sequence::Reconstruction.CaloReco,
  @sequence::Reconstruction.TrkReco,
  @sequence::Reconstruction.CrvReco,
  @sequence::Reconstruction.TrackReco
]
# Full reco path with MC
Reconstruction.RecoMCPath : [
  @sequence::Reconstruction.RecoPath,
  @sequence::Reconstruction.MCReco,
  RecoFilter
]
# No Field reco path
Reconstruction.LineRecoPath : [
  @sequence::Reconstruction.CaloReco,
  @sequence::Reconstruction.TrkReco,
  @sequence::Reconstruction.CrvReco,
  @sequence::Reconstruction.LineReco
]
# No Field reco path with MC
Reconstruction.LineRecoMCPath : [
  @sequence::Reconstruction.LineRecoPath,
  @sequence::Reconstruction.MCReco,
  RecoFilter
]
# OffSpill reco path
Reconstruction.OffSpillRecoPath : [
  @sequence::Reconstruction.CaloReco,
  @sequence::Reconstruction.TrkReco,
  @sequence::Reconstruction.CrvReco,
  @sequence::Reconstruction.OffSpillReco
]
# OffSpill reco path with MC
Reconstruction.OffSpillRecoMCPath : [
  @sequence::Reconstruction.OffSpillRecoPath,
  @sequence::Reconstruction.MCReco,
  RecoFilter
]

# default output
Reconstruction.Output : {
  module_type : RootOutput
  SelectEvents : [ RecoPath ]
  fileName    : @nil
  #  outputCommands : [ "keep *_*_*_*" ]
  outputCommands : [ "drop *_*_*_*",
    @sequence::Reconstruction.GeneralProducts,
    @sequence::Reconstruction.GeneralMCProducts,
    @sequence::Reconstruction.HighRecoProducts,
    @sequence::Reconstruction.HighRecoMCProducts
  ]
}
END_PROLOG
