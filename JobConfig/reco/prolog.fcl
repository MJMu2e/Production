#
#  Prolog for production reconstruction jobs
#
#include "Production/JobConfig/digitize/prolog.fcl"
#include "Offline/CommonMC/fcl/prolog.fcl"
#include "Offline/TrkHitReco/fcl/prolog.fcl"
#include "Offline/TrkReco/fcl/prolog.fcl"
#include "Offline/TrkPatRec/fcl/prolog.fcl"
#include "Offline/Mu2eKinKal/fcl/prolog.fcl"
#include "Offline/CaloReco/fcl/prolog.fcl"
#include "Offline/CaloCluster/fcl/prolog.fcl"
#include "Offline/CaloMC/fcl/prolog.fcl"
#include "Offline/CalPatRec/fcl/prolog.fcl"
#include "Offline/CRVResponse/fcl/prolog.fcl"
#include "Offline/CosmicReco/fcl/prolog.fcl"
#include "Offline/Filters/fcl/prolog.fcl"
#
BEGIN_PROLOG
Reconstruction : {
# define the helix finders
  HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderDe" ]
}
Reconstruction : {
  @table::Reconstruction

  producers : {
    @table::TrkHitReco.producers
    @table::TrkPatRec.producers
    @table::CalPatRec.producers
    @table::CaloReco.producers
    @table::CaloCluster.producers
    @table::CaloMC.producers
    @table::CrvResponsePackage.producers
    @table::CosmicReco.producers

    # choose the hit flagger
    flagPH : @local::CalPatRec.producers.DeltaFinder
    # flagPH : @local::TrkHitReco.producers.FlagBkgHits

    # instantiate explicit helix merger modules
    # NB: positive here refers to helicity, not charge!
    MHDe : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderDe", "HelixFinderDe" ]
    }
    MHDmu : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder" , "CalHelixFinderDmu", "HelixFinderDmu" ]
    }
    MHUe : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderUe", "HelixFinderUe" ]
    }
    MHUmu : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderUmu", "HelixFinderUmu" ]
    }
    # KinKal fits

    KKDe : {
      @table::Mu2eKinKal.producers.KKDe
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDe.ModuleSettings
        HelixSeedCollections : [ "MHDe" ]
      }
    }

    KKUe : {
      @table::Mu2eKinKal.producers.KKUe
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDe.ModuleSettings
        HelixSeedCollections : [ "MHUe" ]
      }
    }
    KKDmu : {
      @table::Mu2eKinKal.producers.KKDmu
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDmu.ModuleSettings
        HelixSeedCollections : [ "MHDmu" ]
      }
    }
    KKUmu : {
      @table::Mu2eKinKal.producers.KKUmu
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDmu.ModuleSettings
        HelixSeedCollections : [ "MHUmu" ]
      }
    }
    KKLine : {
      @table::Mu2eKinKal.producers.KKLine
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKLine.ModuleSettings
        CosmicTrackSeedCollections : ["LineFinder"]
      }
    }
    KKCHmuM : {
      @table::Mu2eKinKal.producers.KKCHmuM
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKCHmuM.ModuleSettings
        CosmicTrackSeedCollections : ["LineFinder"]
      }
    }

    KKCHmuP : {
      @table::Mu2eKinKal.producers.KKCHmuP
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKCHmuP.ModuleSettings
        CosmicTrackSeedCollections : ["LineFinder"]
      }
    }

    # Implicit TrkPatRec config for Final Fits and upstream fits (no merging)
    #
    # Prune output so that only parts related to reconstructed objects are kept
    #
    SelectRecoMC : {
      @table::CommonMC.SelectRecoMC
      CaloClusterMinE : 10.0
      SaveEnergySteps : false
      SaveUnusedDigiMCs : true
      SaveAllUnusedDigiMCs : false
      PrimaryParticle : "compressDigiMCs"
      StrawDigiCollection : "makeSD"
      ComboHitCollection : "makeSH"
      CaloDigiCollection : "CaloDigiMaker"
      CrvDigiCollection : "CrvDigi"
      CaloClusterCollection : "CaloClusterMaker"
      CrvCoincidenceClusterCollections : [ "CrvCoincidenceClusterFinder" ]
      StrawDigiMCCollection : "compressDigiMCs"
      CrvDigiMCCollection : "compressDigiMCs"
      KalSeedCollections  : [ # look for all KalSeeds: no problem if some are missing
            "KKDe", "KKDmu",
            "KKUe", "KKUmu",
            "KKLine", "KKCHmuM", "KKCHmuP"]
      HelixSeedCollections  : ["MHDe", "MHDmu", "MHUe", "MHUmu" ]
      VDSPCollection : "compressDigiMCs:virtualdetector"
    }
    # Compresion
    compressRecoMCs : {
      module_type : CompressDigiMCs
      strawDigiMCTag : "compressDigiMCs"
      crvDigiMCTag : "compressDigiMCs"
      simParticleTags : [ "compressDigiMCs" ]
      extraStepPointMCTags : ["compressDigiMCs:virtualdetector" ]
      surfaceStepTags : [ "compressDigiMCs" ]
      caloShowerStepTags : [ ]
      caloShowerSimTag : ""
      caloShowerROTag : ""
      caloClusterMCTag : "CaloClusterTruthMatch"
      strawDigiMCIndexMapTag : "SelectRecoMC:StrawDigiMap"
      crvDigiMCIndexMapTag : "SelectRecoMC:CrvDigiMap"
      keepAllGenParticles : false
      crvCoincClusterMCTags : [ "CrvCoincidenceClusterMatchMC" ]
      primaryParticleTag : "compressDigiMCs"
      mcTrajectoryTag : "compressDigiMCs"
      rekeySimParticleCollection : false
      noCompression : false
      crvStepsToKeep : [ ]
    }
  }

  filters : {
    # these filters should be replaced with KalSeedFilter FIXME
    LHFilter : {
      module_type   : RecoMomFilter
      KalFinalTagRoot : ""
      TrkTags : [ "KKDe", "KKUe", "KKDmu", "KKUmu" ]
      # // set low cutoffs
      MomentumCutoff : [ 40.0, 40.0, 40.0, 40.0]
    }
    CHFilter : {
      module_type   : RecoMomFilter
      KalFinalTagRoot : ""
      TrkTags : [ "KKCHmuP", "KKCHmuM" ]
      # // set low cutoffs
      MomentumCutoff : [ 300.0, 300.0 ]
    }
# this filter is currently meaningless FIXME
    KLFilter : {
      module_type   : RecoMomFilter
      KalFinalTagRoot : ""
      TrkTags : [ "KKLine" ]
      # // set low cutoffs
      MomentumCutoff : [ 0.0 ]
    }


  }
  analyzers : { # these are specific to MC
    LHCompressionCheck : @local::RecoCompression.Check
    CHCompressionCheck : @local::RecoCompression.Check
  }
}
# now setup track finding sequences. These are separate sequences to allow granular execution
Reconstruction : {
  @table::Reconstruction
  # Downstream electron sequence (plus and minus), using merged helices
  DeReco : [
    TZClusterFinder, AgnosticHelixFinder,   # AgnosticPatRec
    CalTimePeakFinderDe, CalHelixFinderDe,  # CalPatRec
    TimeClusterFinderDe, HelixFinderDe,   # TrkPatRec
    MHDe, # helix merging
    KKDe  # KinKal drift fits
  ]
  # Upstream electron sequence (plus and minus)
  UeReco : [
    TZClusterFinder, AgnosticHelixFinder,   # AgnosticPatRec
    CalTimePeakFinderUe, CalHelixFinderUe,  # CalPatRec
    TimeClusterFinderUe, HelixFinderUe,   # TrkPatRec
    MHUe, # helix merging
    KKUe  # KinKal drift fits
  ]
  # Downstream muon sequence (plus and minus)
  DmuReco : [
    TZClusterFinder, AgnosticHelixFinder,    # AgnosticPatRec
    CalTimePeakFinderDmu, CalHelixFinderDmu,  # CalPatRec
    TimeClusterFinderDmu, HelixFinderDmu,   # TrkPatRec
    MHDmu, # helix merging
    KKDmu  # KinKal drift fits
  ]
  # Upstream muon sequence (plus and minus)
  UmuReco : [
    TZClusterFinder, AgnosticHelixFinder,     # AgnosticPatRec
    CalTimePeakFinderUmu, CalHelixFinderUmu,  # CalPatRec
    TimeClusterFinderUmu, HelixFinderUmu,   # TrkPatRec
    MHUmu, # helix merging
    KKUmu  # KinKal drift fits
  ]
 #
  # NoField straight line
  LineReco : [
    SimpleTimeCluster, LineFinder, KKLine
  ]
  # Central helix
  CentralHelixReco : [
    SimpleTimeCluster, LineFinder, KKCHmuM, KKCHmuP
  ]

  # add protons for calibration TODO!

  # Tracker reco sequence
  TrkHitReco : [  @sequence::TrkHitReco.PrepareHits ] # Track hits
  # Calo reco
  CaloReco : [ @sequence::CaloReco.Reco, @sequence::CaloCluster.Reco ]
  # CRV reco
  CrvReco : [ @sequence::CrvRecoPackage.CrvRecoSequence ]
  # full MC sequence; form the Calo and CRV matching, and compress based on reco content
  # temporary build surface steps from StepPointMCs; this is a patch
  MCReco :  [@sequence::CaloMC.TruthMatch,  CrvCoincidenceClusterMatchMC, SelectRecoMC, compressRecoMCs, CrvCoincidenceClusterMCAssns ]

  # define products to keep
  # First, high-level reco products, and associated sub-products
  # SelectReco has both real data and MC flavors. We will need to rename the instances generically in the near future TODO
  HighRecoProducts : [
    "keep mu2e::KalSeeds_K*_*_*",
    "keep mu2e::CaloClusters_*_*_*",
    "keep mu2e::CaloHits_*_*_*", # these are needed as CaloClusters reference CaloHits and are not compressed
    "keep mu2e::IndexMap_SelectRecoMC_*_*", # the SelectRecoMC products need to be explicit as that has MC products as well
    "keep mu2e::RecoCount_SelectRecoMC_*_*", # that module needs to be refactored to fix this TODO
    "keep mu2e::StrawDigis_SelectRecoMC_*_*",
    "keep mu2e::StrawDigiADCWaveforms_SelectRecoMC_*_*",
    "keep mu2e::CaloDigis_SelectRecoMC_*_*",
    "keep mu2e::CrvDigis_SelectRecoMC_*_*",
    "keep mu2e::CrvCoincidenceClusters_SelectRecoMC_*_*",
    "keep mu2e::CrvRecoPulses_SelectRecoMC_*_*"
  ]
  # Middle reco products, pat rec intermediate results
  MidRecoProducts : [
    "keep mu2e::HelixSeeds_MH*_*_*",
    "keep mu2e::TimeClusters_MH*_*_*"
  ]
  # Low reco products, useful for debugging and event display
  LowRecoProducts : [
    "keep mu2e::ComboHits_*_*_*"
  ]
  # MC truth matched to reco
  HighRecoMCProducts : [
    "keep *_compressRecoMCs_*_*",
    "keep *_CrvCoincidenceClusterMCAssns_*_*",
    "keep *_SelectRecoMC_*_*"
  ]
  # Extra products for display
  EventDisplayProducts : [
    "keep mu2e::ComboHitCollection_flagPH_*_*"
  ]
  GeneralProducts : [
    @sequence::Digitize.GeneralProducts,
    @sequence::Digitize.TriggerProducts # not sure we want to keep these
  ]
  # TODO: add products from reconstruction-level estimates of PBI from tracker and calorimeter

  GeneralMCProducts : [
    @sequence::Digitize.GeneralMCProducts
  ]

  EndSequence : [ LHCompressionCheck, CHCompressionCheck ]
}

# Combined track reconstruction
Reconstruction.OnSpillTrkReco : [
  @sequence::Reconstruction.DeReco,
  @sequence::Reconstruction.UeReco,
  @sequence::Reconstruction.DmuReco,
  @sequence::Reconstruction.UmuReco
]
#
# OffSpill track reconstruction includes CentralHelix (high-momentum muons)
Reconstruction.OffSpillTrkReco : [
  @sequence::Reconstruction.OnSpillTrkReco,
  @sequence::Reconstruction.CentralHelixReco
]
#
# reconstruction precursor Path
Reconstruction.PreTrkReco : [
  @sequence::Reconstruction.CaloReco,
  @sequence::Reconstruction.TrkHitReco,
  @sequence::Reconstruction.CrvReco
]
# No Field reco path
Reconstruction.NoFieldPath : [
  @sequence::Reconstruction.PreTrkReco,
  @sequence::Reconstruction.LineReco
]
# No Field reco path with MC
Reconstruction.NoFieldMCPath : [
  @sequence::Reconstruction.NoFieldPath,
  @sequence::Reconstruction.MCReco,
  KLFilter
]

# OffSpill paths
Reconstruction.OffSpillPath : [
  @sequence::Reconstruction.PreTrkReco,
  @sequence::Reconstruction.OffSpillTrkReco
]
Reconstruction.CentralHelixRecoPath : [
  @sequence::Reconstruction.OffSpillPath,
  CHFilter
]

Reconstruction.CentralHelixRecoMCPath : [
  @sequence::Reconstruction.CentralHelixRecoPath,
  @sequence::Reconstruction.MCReco
]

Reconstruction.LoopHelixRecoPath : [
  @sequence::Reconstruction.OffSpillPath,
  LHFilter
]

Reconstruction.LoopHelixRecoMCPath : [
  @sequence::Reconstruction.LoopHelixRecoPath,
  @sequence::Reconstruction.MCReco
]

# default output
Reconstruction.Output : {
  module_type : RootOutput
  fileName    : @nil
  #  outputCommands : [ "keep *_*_*_*" ]
  outputCommands : [ "drop *_*_*_*",
    @sequence::Reconstruction.GeneralProducts,
    @sequence::Reconstruction.GeneralMCProducts,
    @sequence::Reconstruction.HighRecoProducts,
    @sequence::Reconstruction.HighRecoMCProducts
  ]
}
END_PROLOG
